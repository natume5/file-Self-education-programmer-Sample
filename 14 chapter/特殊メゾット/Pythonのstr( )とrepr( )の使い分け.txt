最初に「これは何のためにあるのか」と不思議に思ったのがrepr()です。str()があるのに、
どう使い分けたら良いのか理解できませんでした。こういうのは自分なりに概念を理解していないと活用できません。

以下の表に両者の違いをまとめてみました。同じような疑問を持つ他言語経験者の参考になれば嬉しいです。
コードの検証にはPython3.6.4を用いました。



関数 	                           戻り値 	                                   用途
str(object) 	objectをユーザーが読みやすい文字列に変換して返す。 	                                エンドユーザーに出力する。
repr(object) 	objectをeval()で再び元のオブジェクトに戻せる文字列に変換して返す。representationの略。 	デバッグ用に出力する。


str()がJavaのクラスでオーバーライドするtoString()メソッド（C#のToString()メソッド）のイメージです。
repr()は引数付きのコンストラクタ（または初期化子）を文字列で返してくれる関数と解釈できます。

datetimeモジュールで確認すると分かりやすいです。

>>> import datetime
>>> today = datetime.date.today()
>>> str(today)
'2018-04-12'
>>> repr(today)
'datetime.date(2018, 4, 12)'
>>> today
datetime.date(2018, 4, 12)
>>> x = eval(repr(today))
>>> today - x
datetime.timedelta(0)


上記のコードでstr(today)で出力される‘2018-04-12’だけでは、todayが文字列なのか、
dateオブジェクトなのか見分けがつきません。

repr(today)の方はtodayがdatetime.dateオブジェクトであることがわかるのでデバッグの時に役に立ちます。
デバッグではprint()をよく用いますが、オブジェクトの内容を確認したい場合にはrepr()の結果を出力します。

つまり、print(today)ではなく、print(repr(today))とします。

対話モードでは変数を入力してEnterすれば、オブジェクトの内容を確認できますが、ファイル（*.py）
ではそれができないので、代わりにrepr()があると考えられます。

上記のコードでも、datetime.date(2018, 4, 12)の部分は、
対話モードで直接出力した内容と同じになるのを確認できます。





Python－特殊メソッド: __repr__と__str__

今回は、Pythonの特殊メソッドの中でも特にややこしい__repr__と__str__
について挙動を確認しながらその特徴を検証しようと思います。色々調べる中で
意外にこの2つの説明やコードについてわかりやすいものがなかったので、
自分で記事を書くことにしました。なお、コードの検証にはjupyter labを使用しています。


1. Pythonの特殊メソッド、__repr__と__str__

Pythonにはクラスを作るときに活用できる特殊メソッドというものがあります。
特殊メソッドはメソッドのオーバーライドを行うときに利用されるもので、
オブジェクト指向の大きな特徴であるポリモーフィズムを簡単に実装できるようにしている仕組み
とも言えるかもしれません。その中で今回は__repr__と__str__です。
これはどちらも文字列で出力結果を返す特殊メソッドですが、それぞれ下記のような特徴があります。


    __repr__()
     オフィシャルな出力結果
     戻り値は有効な式で定義するか、でなければ<>の中に有用な記述を行い、返すようにするのが良いとされている
     jupyter notebookなどではprintを使わず、変数名を指定するだけで出力結果を得ようとするときに呼び出される
     __str__が定義されていない場合にも代わりに呼び出される
     内部的には組み込み関数のrepr()が呼び出されている

    __str__()
     __repr__に対し非公式の出力結果という位置付け
     組み込み関数のprintやformat、strを使うときに呼び出されている
     表示用の特殊メソッドともいえ、__repr__が存在しない場合でもその代わりにはならない



2. __repr__と__str__をコードで検証

ここからはコードで挙動を検証していきます。まずは基本的な挙動と特徴からです。

# 基本
class Test:
    def __init__(self, args):
        self.value = args
    def __repr__(self):
        return "<repr> "+self.value
    def __str__(self):
        return "<str>"+self.value
test=Test("try")
#2つの出力結果
print(test)
test

戻り値

<str>try
[19]: <repr> try


変数名だけで指定した場合とprint文を使った場合とで呼び出されている
特殊メソッドが異なることがはっきりとわかります。これが__repr__と__str__の大きな違いです。
次は、__repr__と__str__のどちらかがかけている場合の挙動をみていきます。

# __repr__有り
# __str__無し
class Test:
    def __init__(self, args):
        self.value = args
    def __repr__(self):
        return "<repr> "+self.value
    #def __str__(self):
    #    return "<str>"+self.value
test=Test("try")
#2つの出力結果
print(test)
test

戻り値

<repr> try
[24]: <repr> try

__str__がない場合に__repr__が代わりを果たしています。一方でその逆は成り立ちません。



# __repr__無し
# __str__有り
class Test:
    def __init__(self, args):
        self.value = args
    #def __repr__(self):
    #    return "<repr> "+self.value
    def __str__(self):
        return "<str>"+self.value
test=Test("try")
#2つの出力結果
print(test)
test

戻り値

<str>try
[25]: <__main__.Test at 0x106b0d4a8>

上記のコードを見て頂くと__repr__と__str__の違いがわかると思います。



3. 参考サイトとまとめ

以上が今回の記事内容です。実際にモジュールを作るときなどにポイントになってくると思いますが、
基本は上記のようになります。どなたかの参考になれば幸いです。今回の参考サイトは以下になります。
